#define MY_DEBUG 
#define MY_RADIO_RF24
//#define MY_PARENT_NODE_ID 0
#define MY_RF24_PA_LEVEL RF24_PA_MAX
//#define MY_NODE_ID 25
#include <MySensors.h>
#include <avr/wdt.h>

#define NODE_IDT 1
#define NODE_Temp 2
#define Node_id   3    //V_VAR1
#define NODE_Time 4
#define NODE_BattCall 5

#define ADCin 14
void(* resetFunc) (void) = 0;

const int OUT_PIN = A2;
const int IN_PIN = A1;
const float IN_STRAY_CAP_TO_GND = 24.48;
const float IN_CAP_TO_GND  = IN_STRAY_CAP_TO_GND;
const float R_PULLUP = 34.8;  
const int MAX_ADC_VALUE = 1023;
float capacitance;

unsigned long SLEEP_TIME = 60000, SLEEP_TIME1 = 60000;
float Temp, Humidity, OldHumidity;
int  s, a;
byte BatteryPcnt, OldBatteryPcnt, start_data;
bool start = 1;
int data[10];
byte Node_ID;

MyMessage msgC(NODE_IDT, V_VAR1);
MyMessage msgT(NODE_Temp, V_VAR1);
MyMessage msgID(Node_id, V_VAR1);
MyMessage msgTime(NODE_Time, V_VAR2);
MyMessage msgCall(NODE_BattCall, V_VAR3);


void presentation()
{
sendSketchInfo("Temp sensor", "V1.0_19062017"); 
//present(NODE_IDH, S_HUM);
present(NODE_IDT, S_CUSTOM, "Cap");
present(NODE_Temp, S_CUSTOM, "Temp");
present(NODE_Time, S_CUSTOM, "Time sleep");
present(Node_id,   S_CUSTOM,   "Node_new_ID");
present(NODE_BattCall, S_CUSTOM, "BattCall");



}
void setup(){
  wdt_enable(WDTO_8S);

  pinMode(OUT_PIN, OUTPUT);
  pinMode(IN_PIN, OUTPUT);
  //analogReference(INTERNAL);
  //int L = loadState(3);
  //if((L) > 0 && (L)< 255)
 // SLEEP_TIME1=20*60000;
 // send(msgTime.set((SLEEP_TIME)/60000));
  a = analogRead(ADCin);
  delay(100);
  a = analogRead(ADCin);
   Node_ID = getNodeId();
  send(msgID.set(Node_ID));
}

void loop()
{
 wdt_reset(); 
 SendDevInfo();
 sleep(SLEEP_TIME1, true);
 }


//********************************************************
void receive(const MyMessage &message) {
  if (message.sender == 0){
   if (message.sensor == NODE_Time){
    if (message.type == V_VAR1) { 
      if((message.getInt())<255){
        saveState(3, message.getInt());
        SLEEP_TIME = (loadState(3)*60000);
        send(msgTime.set((SLEEP_TIME)/60000));
      }
    }
  }  
 } 
  //====  NODE_NEW_ID ============    
  if (message.sender == 0){
    if (message.sensor == Node_id){
      if (message.type == V_VAR1){
        Node_ID = message.getByte();
        hwWriteConfig(EEPROM_NODE_ID_ADDRESS, Node_ID);
        //Serial.print("Node_ID: ");
        //Serial.println(Node_ID);
        resetFunc();
      }
    }
  }      
}
//0000000000000000000000000000000000000000000000000000000000

void BattInfo()
{
  a = analogRead(ADCin);
  send(msgCall.set(a));
  int min_batt = 178;
  int max_batt = 274;
  BatteryPcnt = constrain(map(a, min_batt, max_batt, 0, 100), 0, 100);
  //Serial.print("BatteryPcnt: ");
  //Serial.println(BatteryPcnt);
}
void SendDevInfo()
{

cap();
GetTemp();
send(msgC.set(capacitance, 2));
send(msgT.set(Temp, 2));
  //========= Battery =============
  BattInfo();
   
  sendBatteryLevel(BatteryPcnt);

}
void cap()
{
    pinMode(IN_PIN, INPUT);
    digitalWrite(OUT_PIN, HIGH);
    int val = analogRead(IN_PIN);
    digitalWrite(OUT_PIN, LOW);
    if (val < 1000)
    {
      pinMode(IN_PIN, OUTPUT);
      capacitance = (float)val * IN_CAP_TO_GND / (float)(MAX_ADC_VALUE - val);
      }
    else
    {
      pinMode(IN_PIN, OUTPUT);
      delay(1);
      pinMode(OUT_PIN, INPUT_PULLUP);
      unsigned long u1 = micros();
      unsigned long t;
      int digVal;

      do
      {
        digVal = digitalRead(OUT_PIN);
        unsigned long u2 = micros();
        t = u2 > u1 ? u2 - u1 : u1 - u2;
      } while ((digVal < 1) && (t < 400000L));

      pinMode(OUT_PIN, INPUT);  
      val = analogRead(OUT_PIN);
      digitalWrite(IN_PIN, HIGH);
      int dischargeTime = (int)(t / 1000L) * 5;
      delay(dischargeTime);   
      pinMode(OUT_PIN, OUTPUT);  
      digitalWrite(OUT_PIN, LOW);
      digitalWrite(IN_PIN, LOW);

      capacitance = -(float)t / R_PULLUP
                              / log(1.0 - (float)val / (float)MAX_ADC_VALUE);



    }
    while (millis() % 100 != 0);    
}

double GetTemp(void)
{
  unsigned int wADC;
  double t;
  ADMUX = (_BV(REFS1) | _BV(REFS0) | _BV(MUX3));
  ADCSRA |= _BV(ADEN);  // enable the ADC
  delay(20); 
  ADCSRA |= _BV(ADSC);  // Start the ADC
  while (bit_is_set(ADCSRA,ADSC));
  wADC = ADCW;
  t = (wADC - 318 );
  Temp = t;
}

